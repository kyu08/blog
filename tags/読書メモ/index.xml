<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>読書メモ on blog.kyu08.com</title>
    <link>https://blog.kyu08.com/tags/%E8%AA%AD%E6%9B%B8%E3%83%A1%E3%83%A2/</link>
    <description>Recent content in 読書メモ on blog.kyu08.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>blog.kyu08.com</copyright>
    <lastBuildDate>Sun, 26 May 2024 00:48:56 +0900</lastBuildDate><atom:link href="https://blog.kyu08.com/tags/%E8%AA%AD%E6%9B%B8%E3%83%A1%E3%83%A2/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>いちばんやさしいアジャイル開発の教本 を読んだ</title>
      <link>https://blog.kyu08.com/posts/ichiban-yasashii-agile-no-kyouhon/</link>
      <pubDate>Sun, 26 May 2024 00:48:56 +0900</pubDate>
      
      <guid>https://blog.kyu08.com/posts/ichiban-yasashii-agile-no-kyouhon/</guid>
      <description>2024/4からチーム異動してスクラムを実践しているチームに移ったのでアジャイル・スクラムのインプットをしたいと思い、「いちばんやさしいアジ</description>
      <content>&lt;p&gt;2024/4からチーム異動してスクラムを実践しているチームに移ったのでアジャイル・スクラムのインプットをしたいと思い、「いちばんやさしいアジャイル開発の教本」を読んだ。&lt;/p&gt;
&lt;p&gt;本書を読んで自分なりに勉強になったことをLessonごとに書いていく。（カッコ内の&lt;code&gt;Pxx&lt;/code&gt;はページを表す）&lt;/p&gt;
&lt;h2 id=&#34;lesson6-アジャイル開発とは何かp28-31&#34;&gt;Lesson6. アジャイル開発とは何か（P28-31）&lt;/h2&gt;
&lt;p&gt;「継続的に改善することが前提」なので逆にいえば作りたいものが決まっているならばアジャイル開発を採用するメリットは薄いかもしれない。&lt;/p&gt;
&lt;h2 id=&#34;lesson7-カイゼンp32&#34;&gt;Lesson7. カイゼン（P32）&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;世界で通じる日本語、&amp;ldquo;Kaizen&amp;rdquo;。このKaizenという言葉は日本においてもカタカナで &lt;strong&gt;「カイゼン」&lt;/strong&gt; と表現されており、「改善」という単語とはあえて区別されています。&lt;/p&gt;
&lt;p&gt;もともと改善という表現は「誤りや欠陥を正し、よりよいものにする」という意味があります。カイゼンは &lt;strong&gt;「いまあるものをよりよいものにしていく」&lt;/strong&gt; という精神に基づいており、より前向きで積極的なものだということがわかります。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;「カイゼン」という表記を見たことはあったが、文脈によっては「改善」とは別の単語として使われているというこれは知らなかった。&lt;/p&gt;
&lt;h2 id=&#34;lesson14-アジャイル開発の構造p56&#34;&gt;Lesson14. アジャイル開発の構造（P56）&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;マインドセット：&lt;/strong&gt; アジャイルソフトウェア開発宣言&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;マインドセットを実現するための原則：&lt;/strong&gt; アジャイル宣言の背後にある原則&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;現場での実践：&lt;/strong&gt; スクラム・XP・FDD・カンバン・モブプロなど&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;lesson17-個人と対話p66&#34;&gt;Lesson17. 個人と対話（P66）&lt;/h2&gt;
&lt;p&gt;アジャイルソフトウェア開発宣言の &lt;strong&gt;「プロセスやツールよりも個人と対話を」&lt;/strong&gt; について書いた章。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;対話と議論の違いは何でしょうか。ざっくり説明すると、議論は自分自身の目線から主張を展開するものですが、対話は相手の価値観を尊重し、ともに考えていくものです。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;プロダクト開発では不確実性が高いため、必ずしも正解がなく、あらゆる角度から課題を見つめることでより良い解決策を探っていくことが重要で、そのための有効な手段として「対話」があると解釈した。&lt;/p&gt;
&lt;p&gt;また、対話を繰り返すなかで互いの認識のズレや齟齬を発見し解消していくことで、議論の前提にズレが生まれることが減り、よりスピーディーに問題解決を行うことができるようになりそう。（これはアジャイルに限らないが）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;このように個人を尊重し、対話をしながらチームの課題と全員で向き合うことで相互理解が進み、それぞれが異なる立場からの視点を得ることができます。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;盲目的にプロセスやツールに従うのではなく、個人との対話をして相互理解を深めることでチームが強くなる。そのようなチームでは信頼関係があり情報共有が活発に行われるため問題が起きても迅速にリカバリーすることができる。&lt;/p&gt;
&lt;h2 id=&#34;lesson18-動くソフトウェアp68&#34;&gt;Lesson.18 動くソフトウェア（P68）&lt;/h2&gt;
&lt;p&gt;アジャイルソフトウェア開発宣言の &lt;strong&gt;「包括的なドキュメントよりも動くソフトウェアを」&lt;/strong&gt; について書いた章。&lt;/p&gt;
&lt;p&gt;ソフトウェア開発においては課題とその解決方法を仮説として立て、実際にリリースして検証するという流れで開発を進めることが多い。&lt;/p&gt;
&lt;p&gt;細かくリリースするのではなく、機能を全て作り込んでからリリースした場合、仮説と解決策の確らしさを検証できるのが遅くなってしまう。&lt;/p&gt;
&lt;p&gt;なので、仮説を検証するために最低限必要な機能が備わっているプロダクト（MVP）を提供して仮説の検証を行うことでより素早く検証のループを回すことができる。&lt;/p&gt;
&lt;p&gt;また、いくら社内で話し合ったところで実際の顧客の反応がわかるわけではないので、一定仮説を煮詰めたらリリースして実際の反応をみることが重要そう。&lt;/p&gt;
&lt;h2 id=&#34;lesson19-顧客との協調p70&#34;&gt;Lesson.19 顧客との協調（P70）&lt;/h2&gt;
&lt;p&gt;アジャイルソフトウェア開発宣言の &lt;strong&gt;「契約交渉よりも顧客との協調を」&lt;/strong&gt; について書いた章。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;自社開発の場合はこの契約交渉はどのような形となって現れてくるのでしょうか。たとえば、顧客からのフィードバックに対して「それは仕様が悪い」「仕様通りの挙動です」というようにいまのソフトウェアの挙動が正しいことを前提として判断してしまう、といった保守的な行動として現れます。&lt;/p&gt;
&lt;p&gt;&amp;hellip;(中略)&amp;hellip;&lt;/p&gt;
&lt;p&gt;ユーザーボイスを尊重しながら、そのままいわれたとおりに開発するのではなく、その声の裏側にある本当に要望を見極めていきましょう。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;社内外からのフィードバックをフラットに受け取ってフィードバックの裏側の要求を見極めることでよりよいプロダクトを作っていけそう。&lt;/p&gt;
&lt;h2 id=&#34;lesson20-変化への対応p72&#34;&gt;Lesson.20 変化への対応（P72）&lt;/h2&gt;
&lt;p&gt;アジャイルソフトウェア開発宣言の &lt;strong&gt;「計画に従うことよりも変化への対応を」&lt;/strong&gt; について書いた章。&lt;/p&gt;
&lt;p&gt;プロダクト開発においては常に最新の情報を基に仮説をアップデートすることが重要なので事前に決めた計画通りに進めることよりも、都度変化に適用することが重要そう。(それはそうという感じだが)&lt;/p&gt;
&lt;h2 id=&#34;lesson22-自己組織化チームとリーダーシップp76&#34;&gt;Lesson.22 自己組織化チームとリーダーシップ（P76）&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;図表22-2&lt;/code&gt;が示すように自己組織化チームとはひとことでいうと「自走できるチーム」です。自分たちがなぜここにいるのかを理解し、またお互いの得意分野がわかっているため自分たちで最適なフォーメーションを組みながらビジョンへと向かっていきます。リーダーの意思決定を待つことなく自己修復的に課題を解決していく。それが自己組織化チームの底力です。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;self-organizing-team.webp&#34; alt=&#34;self-organizing-team.webp&#34;&gt;
「いちばんやさしいアジャイル開発の教本」P76より引用&lt;/p&gt;
&lt;p&gt;チームの振り返りなんかでも、「どうすれば自己組織化チームに近付けるか」という観点で考えてみてもいいかもしれない。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;自己組織化チームにおいて情報共有は重要な要素&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;よく透明性が大事、と聞くけどそれも個々人が自律的に行動するために情報は不可欠だからなんだろうなーと思った。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;理想的な自己組織化チームとは？&lt;/p&gt;
&lt;p&gt;(中略)
自己組織化し、それぞれのメンバーがリーダーシップを発揮できるようになると、 &lt;strong&gt;外からチームを見た際にはもはや誰がリーダーと呼ばれる役割なのかわからなくなるでしょう。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;これは自己組織化されたチームの見え方の1つとして良さそうだとおもったので心に留めておきたい。&lt;/p&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;まずは「自己組織化チーム」を目指していきたい。&lt;/li&gt;
&lt;li&gt;実際にアジャイルの入門書を1冊読んでみて、とはいえまずはスクラムガイドをしっかり理解した方がよさそうだと思ったので次はスクラムガイドを読み込んでいこうと思う。&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
  </channel>
</rss>

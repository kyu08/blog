<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>F# on blog.kyu08.com</title>
    <link>https://blog.kyu08.com/tags/f#/</link>
    <description>Recent content in F# on blog.kyu08.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>blog.kyu08.com</copyright>
    <lastBuildDate>Sun, 15 Jun 2025 14:00:00 +0900</lastBuildDate><atom:link href="https://blog.kyu08.com/tags/f#/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>関数型まつり2025に参加した</title>
      <link>https://blog.kyu08.com/posts/fp-matsuri-2025/</link>
      <pubDate>Sun, 15 Jun 2025 14:00:00 +0900</pubDate>
      
      <guid>https://blog.kyu08.com/posts/fp-matsuri-2025/</guid>
      <description>2025/06/14(土)、2025/06/15(日)に中野セントラルパークで行われた関数型まつり2025に参加した。 筆者はElmやRust</description>
      <content>&lt;p&gt;2025/06/14(土)、2025/06/15(日)に中野セントラルパークで行われた関数型まつり2025に参加した。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;nakano-central-park.webp&#34; alt=&#34;nakano-central-park&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;pop.webp&#34; alt=&#34;pop&#34;&gt;&lt;/p&gt;
&lt;p&gt;筆者はElmやRustの開発体験を気に入っており、Webアプリケーションのサーバーサイドを関数型言語で書くことに興味があったので参加してみた。&lt;/p&gt;
&lt;h2 id=&#34;関数型言語テイスティング-haskell-scala-clojure-elixirを比べて味わう関数型プログラミングの旨さ---lagénorhynqueカマイルカさん&#34;&gt;関数型言語テイスティング: Haskell, Scala, Clojure, Elixirを比べて味わう関数型プログラミングの旨さ - lagénorhynque/カマイルカさん&lt;/h2&gt;
&lt;p&gt;lagénorhynque/カマイルカさんによるHaskell, Scala, Clojure, Elixirの紹介と比較を行う発表。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.docswell.com/s/lagenorhynque/Z6VX6E-functional-language-tasting-haskell-scala-clojure-elixir#p1&#34; target=&#34;_blank&#34; &gt;https://www.docswell.com/s/lagenorhynque/Z6VX6E-functional-language-tasting-haskell-scala-clojure-elixir#p1&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;部分適用や関数合成やパイプ演算子などElmで便利だった言語機能を思い出しながら聞いていた。&lt;/p&gt;
&lt;p&gt;文法を見ていると、Elmの文法はかなりHaskellに近いようだった。(ML系と呼ばれるらしい)&lt;/p&gt;
&lt;p&gt;あとは関数型かつ動的型付け言語の実際のアプリケーション開発での書き味が全然想像がつかないのでちょっとElixirやClojureを書いてみたくなった。質疑応答でも触れられていたが、実際にML系の言語とlispなどの動的型付け言語の関数型言語ではメンタルモデルが違うらしい。&lt;/p&gt;
&lt;p&gt;発表の最後に関数型プログラマのメンタルモデルとして以下のようなことを紹介されていて、自分が関数型言語から得た学びと重なる部分が多かった。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;適切な制約が解放をもたらす
&lt;ul&gt;
&lt;li&gt;純粋関数を基本にしてコードを組み立てていく&lt;/li&gt;
&lt;li&gt;いつでもどこでも破壊的に更新できるデータ構造は怖いため不変/永続データを基本に&lt;/li&gt;
&lt;li&gt;適切な型を定義することで不正値を表現不能にしてより型安全に&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;単純で安定したブロックを基礎に全体を構成したい
&lt;ul&gt;
&lt;li&gt;式思考、宣言的、合成可能&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;関数型言語を採用し維持し継続する---松澤-有さん&#34;&gt;関数型言語を採用し、維持し、継続する - 松澤 有さん&lt;/h2&gt;
&lt;p&gt;Siiibo証券株式会社のCTOである松澤さんによる自社プロダクトのフロントエンド、バックエンドの開発言語として関数型言語(Elm, Elixir)をなぜ採用したのか、いかにして維持し、継続しているかについての発表。実は主にこの発表を聞くために関数型まつりに参加したので良い発表を聞けてよかった。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://zenn.dev/siiibo_tech/articles/adopting-fp-languages&#34; target=&#34;_blank&#34; &gt;https://zenn.dev/siiibo_tech/articles/adopting-fp-languages&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;結局はラストマンシップを持って自分がなんとかするという気概が重要だという話が一番印象的だった。これは関数型言語を業務で書いているわけではない自分にも大いに参考になる話だと思っていて、結局どんな技術を採用したかやCTOかメンバーかなどにかかわらず、このラストマンシップを持っているエンジニアが多ければ多いほど開発組織は強固になるんだろうなと思った。&lt;/p&gt;
&lt;p&gt;また「アウトリーチを怠らなければ意外と世の中にちゃんと仲間はいる」ということをおっしゃっていて、使用言語がメインストリームであろうとなかろうと外部発信を通してコミュニティに貢献したり認知を獲得することの重要性を改めて感じた。やっていき。&lt;/p&gt;
&lt;p&gt;総じて松澤さんのエンジニアとしてのマインドセット的な部分がとても参考になった。&lt;/p&gt;
&lt;p&gt;技術的な内容に関しては、コードレビューの話とUpkeepの話が参考になった。&lt;/p&gt;
&lt;p&gt;コードレビューに関しては以下のようなことをおっしゃっていて、とても参考になった。特に2番目に関しては、前提としてコード品質を重要視するマインドがチームに装備されている必要があると思っていて、それをどう実現しているのか気になった。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自分がいいと思う技術であっても、それを伝道できなければあとが続かない&lt;/li&gt;
&lt;li&gt;チームにとって良いコードとはどのようなものか、ということを感覚、信念として共有できる状態に持っていくことを目指している&lt;/li&gt;
&lt;li&gt;人は忘れるし、一度言っただけで身につくことは誰であれないので繰り返し伝えていくことが重要&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Upkeepとは維持費の意味で、ここでは依存ライブラリや言語自体のバージョンアップなどのことを指す。こまめにバージョンアップ作業をやっておくことでいざというときに言語やライブラリの新機能をすぐ取り込めたり、巨大なバージョンアップのせいでデグレするリスクを低減できたりと良いこと尽くめだと改めて感じた。（もちろん簡単ではないが）&lt;/p&gt;
&lt;p&gt;あとはバージョンを最新に保つという行為に名前をつけたことがなかったのでUpkeepという語で表現するのはいいなーと思った。&lt;/p&gt;
&lt;p&gt;以下発表を聞きながら取ったメモ。(発表を聞きつつスライドを見ながら書いたメモなので誤りが含まれる場合があります🙇)&lt;/p&gt;
&lt;h3 id=&#34;技術選定の方針&#34;&gt;技術選定の方針&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;CTO, Founding Engineerが技術構成を選ぶにあたっての観点
&lt;ul&gt;
&lt;li&gt;まともなモノを継続的に提供するに足る機能があるか&lt;/li&gt;
&lt;li&gt;それを実際につくるヒトを継続的に集められるか&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;（スタートアップなら）
&lt;ul&gt;
&lt;li&gt;（上記2点を説得材料として）カネを集められるか&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;非メインストリーム言語でどうやっていくか&#34;&gt;非メインストリーム言語でどうやっていくか&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;ElixirやElmはメインストリームと目されているとは言えず、モノ・ヒト・カネの要素を自信を持って揃えるには弱い&lt;/li&gt;
&lt;li&gt;とはいえ、良いと感じた技術があって、良いものを作れると検証できたのであればあとは自分がやるかどうかでしかない
&lt;ul&gt;
&lt;li&gt;勝手に機会は降ってこない&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;勇気と周りを巻き込んで走り続ける力が重要&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;コードレビューの技術&#34;&gt;コードレビューの技術&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;自分がいいと思う技術であっても、それを伝道できなければあとが続かない&lt;/li&gt;
&lt;li&gt;健全で有意義なコードレビューのやり取りがどのようなものか？という経験とその内面化が重要&lt;/li&gt;
&lt;li&gt;どういうコードがチームにとって良いコードかを伝道する
&lt;ul&gt;
&lt;li&gt;感覚、信念として共有できる状態に持っていきたい&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;以下の理由でコードレビューで繰り返し伝えていくことが重要
&lt;ul&gt;
&lt;li&gt;人は忘れる&lt;/li&gt;
&lt;li&gt;新しい人は入る&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;一度言っただけで身につくことは誰であれ、ない&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;upkeep&#34;&gt;Upkeep&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Upkeepとは維持費の意味で、ここでは依存ライブラリや言語自体のバージョンアップなどのことを指す。&lt;/li&gt;
&lt;li&gt;Upkeep恐怖症にならずにこまめにやれる環境をつくる。&lt;/li&gt;
&lt;li&gt;(バージョンアップ作業がやりやすいのは言語の大きな加点項目)&lt;/li&gt;
&lt;li&gt;Elixirで静的型検査の導入が2022年に発表された
&lt;ul&gt;
&lt;li&gt;Upkeepしておくと、こういった新機能もすぐに取り込める&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;情報収集&#34;&gt;情報収集&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;言語公式フォーラム, ML, Slack, Discordのウォッチ
&lt;ul&gt;
&lt;li&gt;そもそもコミュニティがデカすぎないので最新動向をすべて追うのがそこまで大変ではない&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;コンパイラ、主要ライブラリのissue trackerも購読する
&lt;ul&gt;
&lt;li&gt;チーム内で抱えてる課題と似たような話題も出たりする&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Twitter&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;コミュニティ還元&#34;&gt;コミュニティ還元&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;フォーラムでの質問を見るだけでなく回答もする
&lt;ul&gt;
&lt;li&gt;小さいコミュニティなので自分が第一人者、Front Runnerである可能性もある&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;国内外の勉強会参加、主催協力も積極的に行う&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;採用&#34;&gt;採用&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;やれることをやり、アウトリーチもすることが採用に直結する&lt;/li&gt;
&lt;li&gt;非メインストリーム言語だとその言語を業務で書くにはそもそも会社の選択肢が少なかったりするので、意外とマッチングしやすかったりもする&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;続けていく気概&#34;&gt;続けていく気概&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;結局大事なのは言いだしっぺがケツを持つ気概があるかどうか&lt;/li&gt;
&lt;li&gt;アウトリーチを怠らなければ意外と世の中にちゃんと仲間はいる&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;産業機械をelixirで制御する---菊池-豊さん&#34;&gt;産業機械をElixirで制御する - 菊池 豊さん&lt;/h2&gt;
&lt;p&gt;菊池 豊さんによる複数の水力発電の制御ソフトウェアをElixirで書いた経験を紹介する発表。&lt;/p&gt;
&lt;p&gt;Elixirは書きやすく、コミュニティも盛り上がっているという話を聞いてちょっと書いてみたくなった。&lt;/p&gt;
&lt;p&gt;以下メモ。&lt;/p&gt;
&lt;h3 id=&#34;課題&#34;&gt;課題&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Python
&lt;ul&gt;
&lt;li&gt;並行プログラミングができなかった&lt;/li&gt;
&lt;li&gt;コンパイラでの支援が期待できなかった&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;リプレイス先の候補はGo, Rust, Haskell, Erlang, Elm
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/kikuyuta/items/96c3f91a850e9274b0e9&#34; target=&#34;_blank&#34; &gt;Elixir を使うようになった経緯 〜電力システム制御の現場から〜&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;why-elixir&#34;&gt;Why Elixir&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;世俗型関数型言語
&lt;ul&gt;
&lt;li&gt;関数型であることにこだわりすぎず使いやすさがある&lt;/li&gt;
&lt;li&gt;コミュニティも楽しかった&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;並行性
&lt;ul&gt;
&lt;li&gt;アクターモデル&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;パイプ演算子&lt;/li&gt;
&lt;li&gt;パターンマッチ&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;elixirにないもの&#34;&gt;Elixirにないもの&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;型
&lt;ul&gt;
&lt;li&gt;静的型解析がほしい&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;lean言語は新世代の純粋関数型言語になれるか---井上亜星さん&#34;&gt;Lean言語は新世代の純粋関数型言語になれるか？ - 井上亜星さん&lt;/h2&gt;
&lt;p&gt;井上亜星さんによるLean言語の紹介の発表。&lt;/p&gt;
&lt;p&gt;この発表でLean言語という言語の存在を知った。純粋関数型言語でありながらforループやwhileループを書けるのはユニークだなーと思った。&lt;/p&gt;
&lt;h2 id=&#34;what-i-have-learned-from-15-years-of-functional-programming---scott-wlaschinさん&#34;&gt;What I have learned from 15 years of functional programming - Scott Wlaschinさん&lt;/h2&gt;
&lt;p&gt;Scott Wlaschinさんによる関数型プログラミングでの学びを共有する発表。&lt;/p&gt;
&lt;p&gt;「直和型とレコード型を駆使しドメインモデリングを正確に表現することで保守性が向上するだけでなく動作可能なドキュメントとしても機能する」という話が印象に残った。&lt;/p&gt;
&lt;p&gt;前者のメリットは以前から感じていたが、後者の観点はなかったので面白かった。（言われてみればそれはそうという感じだが）&lt;/p&gt;
&lt;p&gt;以下メモ。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;パイプライン指向で書くことで保守性の高いコードを書くことができる
&lt;ul&gt;
&lt;li&gt;以前はSOLID原則を満たすことを意識しすぎてしまいうまくいかなかったが、パイプライン的な志向でコードを書くことで自然と綺麗なコードを書くことができ、SOLID原則も自然と満たすことができるようになったとのこと&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ドメインモデリング
&lt;ul&gt;
&lt;li&gt;直和型をうまく使ってドメインモデルを正確に表現する
&lt;ul&gt;
&lt;li&gt;保守性が高くなり、バグが減る&lt;/li&gt;
&lt;li&gt;実行可能なドキュメントとしても機能する&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Railway Oriented Programmingを使うことでエラー処理を伴う処理を保守性高く書くことができる&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;fの設計と妥協点---net上で実現する関数型パラダイム---猪股-健太郎さん&#34;&gt;F#の設計と妥協点 - .NET上で実現する関数型パラダイム - 猪股 健太郎さん&lt;/h2&gt;
&lt;p&gt;猪股 健太郎さんによるF#の言語設計の特徴、設計意図を紹介する発表。&lt;/p&gt;
&lt;p&gt;純粋関数型言語なのかと思っていたが、命令形っぽい書き方もできることは知らなかった。他の.NET言語との相互運用性があるのも便利そう。&lt;/p&gt;
&lt;p&gt;以下メモ。&lt;/p&gt;
&lt;h3 id=&#34;概要&#34;&gt;概要&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;OCamlに大きな影響を受けている&lt;/li&gt;
&lt;li&gt;金融工学、データサイエンス、科学計算、Webアプリなどで活用されている&lt;/li&gt;
&lt;li&gt;F#をJavaScriptにトランスパイルするコンパイラもあり、フロントエンドも書ける&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;fの特徴&#34;&gt;F#の特徴&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;静的型付けの非純粋関数型言語である。
&lt;ul&gt;
&lt;li&gt;デフォルトはイミュータブルだがmutableにもできる&lt;/li&gt;
&lt;li&gt;.NETランタイムは仮想マシン型
&lt;ul&gt;
&lt;li&gt;C#, F#など複数言語を.NETランタイム上で動かす前提で設計されており共通中間言語、共通型システム、共通言語仕様を備える&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ホスト環境との相互運用性
&lt;ul&gt;
&lt;li&gt;F#で書かれたコードは他の.NET言語から自然かつ安全に利用可能&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;マルチパラダイム言語
&lt;ul&gt;
&lt;li&gt;関数型プログラミングのパラダイムを核に、オブジェクト指向プログラミングの要素も備える&lt;/li&gt;
&lt;li&gt;クラスや構造体も書ける&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;言語設計の意図&#34;&gt;言語設計の意図&lt;/h3&gt;
&lt;p&gt;プログラマーが命令的なコーディングから関数型のコーディングへ移行する際のハードルを下げることを意識した設計になっているらしい。&lt;/p&gt;
&lt;h2 id=&#34;マイクロサービス内で動くapiをfで書いている---ayato-pさん&#34;&gt;マイクロサービス内で動くAPIをF#で書いている - ayato-pさん&lt;/h2&gt;
&lt;p&gt;ayato-pさんによるマイクロサービスの1サービスをF#で書く際の設計や悩みどころを紹介する発表。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://speakerdeck.com/ayato0211/maikurosabisunei-dedong-kuapiwof-number-deshu-iteiru&#34; target=&#34;_blank&#34; &gt;https://speakerdeck.com/ayato0211/maikurosabisunei-dedong-kuapiwof-number-deshu-iteiru&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;ドメイン設計の際に容易にOptionを使わずにenumの別のvariantとして表現する、という考え方はRustなどでも活かせそうだと思った。別の概念であれば別の型として表現するのが大事そう。&lt;/p&gt;
&lt;p&gt;以下メモ。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;どんなチームで採用したのか
&lt;ul&gt;
&lt;li&gt;ペアプログラミングを中心に100人超の組織で開発している&lt;/li&gt;
&lt;li&gt;モノリス -&amp;gt; マイクロサービスの移行をやっている&lt;/li&gt;
&lt;li&gt;マイクロサービスの各APIは多種多様な言語で書かれている&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;F#導入以前のプロダクトチーム
&lt;ul&gt;
&lt;li&gt;JVM系、Elixir, Go, Rust, OCaml, Haskellなども採用&lt;/li&gt;
&lt;li&gt;.NET系の言語は採用されていなかった&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;どう導入したのか
&lt;ul&gt;
&lt;li&gt;システムのコアにいきなり採用するのはリスキーだったのでなにかあってもまずは影響が少ないサブシステムで採用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;なぜF#か
&lt;ul&gt;
&lt;li&gt;静的型付け&lt;/li&gt;
&lt;li&gt;シンタックスが簡素&lt;/li&gt;
&lt;li&gt;.NETの資産を活用できる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;F#らしさを活かした設計
&lt;ul&gt;
&lt;li&gt;Optionなどを入れずに判別共用体を使って設計する&lt;/li&gt;
&lt;li&gt;e.g. 上場企業と非上場企業を表現するときに&lt;code&gt;isListed: bool&lt;/code&gt;, &lt;code&gt;listedAt: Option&amp;lt;DateTime&amp;gt;&lt;/code&gt;のように表現するのではなく&amp;hellip;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Company&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; id&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; CompanyId
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    name&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    isListed&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    listedAt&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; Option&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;DateTime&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;そもそも別のvariantとして表現する
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Listed&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Listed &lt;span style=&#34;color:#66d9ef&#34;&gt;of&lt;/span&gt; listedAt&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; DateTime
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CompanyProfile&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; id&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; CompanyId
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    name&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&amp;lt;&lt;/span&gt;RequireQualifiedAccess&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Company&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; Listed &lt;span style=&#34;color:#66d9ef&#34;&gt;of&lt;/span&gt; CompanyProfile &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; Listed
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; UnListed &lt;span style=&#34;color:#66d9ef&#34;&gt;of&lt;/span&gt; CompanyProfile
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;スポンサーブース&#34;&gt;スポンサーブース&lt;/h2&gt;
&lt;p&gt;Jane Streetのエンジニアの方にお聞きしたがJane StreetではフロントエンドとサーバーサイドをOCamlで書いているらしい（！）ブースでお話した方も関数型言語が書きたくて入社したそうで、関数型言語への愛を感じた。&lt;/p&gt;
&lt;p&gt;ブースでいただいたノベルティのTシャツもめっちゃOCamlだった。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;jane-street.webp&#34; alt=&#34;jane-street&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;ノベルティ&#34;&gt;ノベルティ&lt;/h2&gt;
&lt;p&gt;入場時にロゴ入りのトートバッグがもらえた。
&lt;img src=&#34;bag-1.webp&#34; alt=&#34;bag&#34;&gt;&lt;/p&gt;
&lt;p&gt;Nulabさんのノベルティのマイクロファイバークロス。実用的でありがたい。
&lt;img src=&#34;nulab.webp&#34; alt=&#34;nulab&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;
&lt;p&gt;今は業務で関数型言語を使うことはないが、関数型言語の考え方を取り入れることで非関数型言語でもより良いコードを書けるようになると改めて感じた。&lt;/p&gt;
&lt;p&gt;個人で初めてオフラインの勉強会/カンファレンスに参加したが普通に楽しかったのでまた行ってみようと思う。&lt;/p&gt;
&lt;h2 id=&#34;つけ麺情報&#34;&gt;つけ麺情報&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://tabelog.com/tokyo/A1319/A131902/13115487&#34; target=&#34;_blank&#34; &gt;二代目えん寺&lt;/a&gt;
がとても美味しかった。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;tsukemen.webp&#34; alt=&#34;tsukemen&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://sporto.github.io/elm-patterns/advanced/railway.html&#34; target=&#34;_blank&#34; &gt;Elm Patternsでも紹介されていた&lt;/a&gt;
のを思い出した。改めて読み直してみよう。&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
    </item>
    
  </channel>
</rss>

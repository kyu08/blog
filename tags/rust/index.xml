<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>rust on blog.kyu08.com</title><link>https://blog.kyu08.com/tags/rust/</link><description>Recent content in rust on blog.kyu08.com</description><generator>Hugo -- gohugo.io</generator><language>ja</language><copyright>kyu08.com</copyright><lastBuildDate>Fri, 31 Mar 2023 01:15:48 +0900</lastBuildDate><atom:link href="https://blog.kyu08.com/tags/rust/index.xml" rel="self" type="application/rss+xml"/><item><title>Makefileに定義されたtargetをfzfで選択して実行するCLIツールをRustでつくった</title><link>https://blog.kyu08.com/posts/fzf-make/</link><pubDate>Fri, 31 Mar 2023 01:15:48 +0900</pubDate><guid>https://blog.kyu08.com/posts/fzf-make/</guid><description>Makefileに定義されたtargetをfzfで選択して実行するCLIツールをRustでつくった。 https://github.com/kyu08/fzf-make こんな感じで動く。 fzf-makeがや</description><content>&lt;p>Makefileに定義されたtargetをfzfで選択して実行するCLIツールをRustでつくった。&lt;/p>
&lt;p>&lt;a href="https://github.com/kyu08/fzf-make">https://github.com/kyu08/fzf-make&lt;/a>&lt;/p>
&lt;p>こんな感じで動く。&lt;/p>
&lt;p>&lt;img src="fzf-make-demo.gif" alt="fzf-make-demo">&lt;/p>
&lt;h2 id="fzf-makeがやっていること">fzf-makeがやっていること&lt;/h2>
&lt;ol>
&lt;li>&lt;code>Makefile&lt;/code>からtargetを正規表現で抜き出す&lt;/li>
&lt;li>&lt;code>skim&lt;/code>(※)に実行オプションとtargetたちを渡す&lt;/li>
&lt;li>&lt;code>skim&lt;/code>がプレビューウィンドウ付きのfuzzy-finderを表示&lt;/li>
&lt;li>&lt;code>skim&lt;/code>から選択されたtargetが返ってくるので&lt;code>make ${target}&lt;/code>を実行&lt;/li>
&lt;/ol>
&lt;p>基本的な動作はすべて&lt;code>skim&lt;/code>任せになっていてRust側でやっているのは&lt;code>skim&lt;/code>とのやりとりくらいになっている。&lt;/p>
&lt;p>※&lt;a href="https://github.com/lotabout/skim">lotabout/skim&lt;/a>&amp;hellip;Rust製のfuzzy-finder。Rustのライブラリとして利用することもできる。&lt;/p>
&lt;p>(makeの文法が思ったより多彩っぽかったので自分が必要とするごく簡単なユースケース以外をカバーするのは&lt;a href="https://twitter.com/kyu08_/status/1639986936407531525">早々に諦めた。&lt;/a>(makeで1冊本が書けるぐらいだしそれはそうという感じではある))&lt;/p>
&lt;p>brewコマンドでインストールできるので気になる方はぜひ。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>brew tap kyu08/tap
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>brew install kyu08/tap/fzf-make
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>ソースも公開しているので、「こう書くといいよ」とかバグとかありましたらぜひissueやPRで教えてください。&lt;/p>
&lt;p>&lt;a href="https://github.com/kyu08/fzf-make">https://github.com/kyu08/fzf-make&lt;/a>&lt;/p>
&lt;h2 id="実装">実装&lt;/h2>
&lt;p>上述の通り処理の大部分はskim任せになっている。(書いたコードはテストを含めても200行程度)&lt;/p>
&lt;p>ただskimをライブラリとして利用する実装サンプルがあまりなかったのがちょっと大変だった。特にプレビューウィンドウの表示にfzfの候補文字列を変数としたシェルコマンドの形で渡すことができることに気づくまでに時間がかかった&lt;/p>
&lt;p>↓の&lt;code>{}&lt;/code>にtarget名が入るイメージ。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> preview_command &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">r&lt;/span>&lt;span style="color:#e6db74">&amp;#34;line=$(bat Makefile | grep -nE &amp;#39;^{}\s*:&amp;#39; | sed -e &amp;#39;s/:.*//g&amp;#39;); bat --style=numbers --color=always --line-range $line: --highlight-line $line Makefile&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;a href="https://github.com/kyu08/fzf-make/blob/3a627d0a1aa75b1bf1ff87f3443f63393afbcf10/src/misc.rs#L18">https://github.com/kyu08/fzf-make/blob/3a627d0a1aa75b1bf1ff87f3443f63393afbcf10/src/misc.rs#L18&lt;/a>&lt;/p>
&lt;p>あとはgoでいつもやっている感じでテーブル駆動テストっぽくテストを書いてみた。可読性も保守性も高いので割と気に入っている。&lt;/p>
&lt;p>&lt;a href="https://github.com/kyu08/fzf-make/blob/3a627d0a1aa75b1bf1ff87f3443f63393afbcf10/src/misc.rs#L145">https://github.com/kyu08/fzf-make/blob/3a627d0a1aa75b1bf1ff87f3443f63393afbcf10/src/misc.rs#L145&lt;/a>&lt;/p>
&lt;h2 id="動機">動機&lt;/h2>
&lt;ul>
&lt;li>Rustが書きたかった。(以上)&lt;/li>
&lt;/ul>
&lt;p>最近Rustのやっていきが高まっており、&lt;a href="https://doc.rust-jp.rs/book-ja/">The Rust Programming Language&lt;/a> を1周したので何か作ってみるぞーという機運とMakefileのターゲットをfuzzy-finderで絞り込めたら便利そうだなーという気持ちが重なったのでRustでfzf-makeを作ってみた。 (あとはskimの存在を知っていたのも大きい。)&lt;/p>
&lt;p>自分が欲しいCLIツールを手に入れつつRustの経験が積めたのでよかった。&lt;/p>
&lt;p>ちなみにRustに入門した直接的(?)なきっかけとしてはこのスライドを目にして、「Elmっぽい！楽しそう！」と思ったのが発端だった。Rustに興味を持っている人はぜひ読んでみて欲しい。&lt;/p>
&lt;p>&lt;a href="https://speakerdeck.com/estie/man-wochi-siteshi-merurust">満を持して始める Rust&lt;/a>&lt;/p>
&lt;h2 id="rustを触ってみて感じたこと">Rustを触ってみて感じたこと&lt;/h2>
&lt;p>Rustを触る前に持っていた印象は「コンパイルが通りずらく、安全性が高い」「関数型っぽい」という感じだった。&lt;/p>
&lt;p>実際に学んでみた印象は次のような感じ。&lt;/p>
&lt;ul>
&lt;li>関数型っぽい書き心地
&lt;ul>
&lt;li>特にenumとパターンマッチング,Option型 ,Result型, 式指向な考え方などの関数型っぽい言語機能や極力データをイミュータブルに扱う思想などが心地よかった。筆者が大好きな言語であるElm(ウェブブラウザベースのGUIを作成するための純粋関数型)の好きな部分をほとんど含んでたのでElmに近い感覚で書くことができた。(もちろん慣れてないこともあってElmよりも全然難しかったけど)&lt;/li>
&lt;li>(Elmが気になる方は&lt;a href="https://guide.elm-lang.jp/">Elm Guide&lt;/a>がおすすめです)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>↑に近いがNull安全なことに加えて所有権などの概念のおかげでコンパイルが通りさえすればちゃんと動いてくれるという安心感がある。
&lt;ul>
&lt;li>リファクタもやりやすそう。(enumにバリアントを追加したとき、パターンマッチの全箇所を修正しないとコンパイルが通らなかったりすると思うので)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>開発体験が良い
&lt;ul>
&lt;li>エラーメッセージがとても丁寧。「ここがこう悪いで〜」とか「ここをこう直すとええで〜」みたいなことまでエラーメッセージに書いてくれてあるホスピタリティに感動した。こういったところもRustが生産性が高いと言われる所以なのかもしれない。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>コミュニティの初学者をサポートする姿勢がすごい
&lt;ul>
&lt;li>RustのOSSプロジェクトへのcontributionについては &lt;a href="https://zenn.dev/fraternite/articles/4e11063bf05aac">rust-lang/rustへのcode contributionをはじめからていねいに&lt;/a> が詳しいが、Rust製のOSSプロジェクトには&lt;code>E-mentor&lt;/code>というタグがありissueを進めるに当たってメンターが指針を記してくれているらしい。（&lt;a href="https://github.com/rust-lang/rust/issues/109099">https://github.com/rust-lang/rust/issues/109099&lt;/a> これとかすごい。）&lt;/li>
&lt;li>いつかRustのOSSプロジェクトにもcontributionしてみたい&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>他の言語と比べて動くものをつくるまでに必要な学習コストは高いとは思うがRustをちゃんと書けるようになれば生産性高く安全なコードが書けると思うので必ずしも学習コストが高いとは言えないのかもしれない。（他の言語でも安全なコードを書くためには一定の学習や経験が必要だろうし）（※想像で喋っています）&lt;/li>
&lt;/ul>
&lt;p>総じて開発体験は良かったのでこれからもゆるゆるとRustの学習は続けていきたい。&lt;/p>
&lt;h2 id="余談">余談&lt;/h2>
&lt;p>テスト実行に &lt;a href="nextest-rs/nextest">https://github.com/nextest-rs/nextest&lt;/a> を使ってみたがテスト結果が見やすくて便利だった。&lt;/p>
&lt;p>&lt;code>cargo run&lt;/code>の結果
&lt;img src="cargo-run.png" alt="cargo run">&lt;/p>
&lt;p>&lt;code>cargo nextest run&lt;/code>の結果
&lt;img src="nextest-run.png" alt="cargo nextest run">&lt;/p>
&lt;p>カラフルで見やすい。&lt;/p></content></item></channel></rss>